git init

git clone

	note: cloning a repository just means to make a copy of one. This can either be done from github to your local machine, or you can even clone a local directory into another local area. Git automatically sets up a remote pointing to the repository you cloned from

	forking: only makes sense in the context of GitHub (or similar tools) in which the site makes a clone of a repository, but references original repository to save space and makes it easier to suggest changes for the original repository

	To add others as collaborators to your repository on GitHub, go to settings -> collaborators and then adding their GitHub username

git checkout
git checkout master
git checkout -b new_branch_name

	note: Equivalent to 'git branch new_branch_name' followed by 'git checkout new_branch_name'. Since these are the commands you would use to make and switch to a new branch, it's nice that there is a one line version. This is also the command you would run if you were in a detached head state, made a new commit, and wanted to retain changes

git log
git log --stat

	note: stat option shows which files were changed in each commit

git log --graph --oneline master branch_from_master
git log -n1

	note: -n1 only shows most recent commit

git status

git diff
git diff --staged
git diff commitID_1 commitID_2

git show commitID1

	note: compares given commit to its parent commit

git add

git commit

git branch
git branch new_branch_name
git branch -d coins

	note: deleting a branch only deletes the label. Of course if the deleted branch hasn't been merged with another, the commits starting from the branch point will be effectively lost.

git remote

	note: like branch command, but for viewing remotes (a remote in the local repository is basically a reference to another repository)

git remote add origin git@github.com:dshope11/reflections.git

	note: to add remote repositories

git remote -v

	note: v for verbose (to show urls)

git remote rm remote_URL

git push origin master

	note: push takes two arguments - the remote you want to send changes to and the name of the local branch you'd like to push (by default, branch on remote will have the same name as branch pushed). Also, while this command updates the local repository, it also updates the local branch to point to the new commit if it is the one currently checked out.

git fetch origin

git pull origin master

	note: what actually happens with a git pull is that the remote branch gets fetched (updating the local copy of the remote branch) then that branch gets merged into the local one

	or

	git pull origin master = git fetch origin; git merge master origin/master;

git merge branch2 branch3
git merge --abort

	note: git merge will also include the currently checked-out branch in the merged version. So if you have branch1 checked out, and you run git merge branch2 branch3, the merged version will combine branch1 as well as branch2 and branch3. That’s because the branch1 label will update after you make the merge commit, so it’s unlikely that you didn’t want the changes from branch1 included in the merge. For this reason, you should always checkout one of the two branches you’re planning on merging before doing the merge. Which one you should check out depends on which branch label you want to point to the new commit.

	Since the checked-out branch is always included in the merge, you may have guessed that when you are merging two branches, you don't need to specify both of them as arguments to git merge on the command line. If you want to merge branch2 into branch1, you can simply git checkout branch1 and then type git merge branch2. The only reason to type git merge branch1 branch2 is if it helps you keep better mental track of which branches you are merging.

	Also, since the two branches are merged, the order in which they are typed into the command line does not matter. The key is to remember that git merge always merges all the specified branches into the currently checked out branch, creating a new commit for that branch.

git config --global user.name "David Shope"
git config --global user.email "your_email@example.com"
git config --global core.editor "subl -n -w"
git config --global push.default upstream
git config --global merge.conflictstyle diff3

git credential-osxkeychain

	note: use to see if osxkeychain is already installed. For Mac only!

git config --global credential.helper osxkeychain

	note: to tell git to use osxkeychain helper to remember your password when talking with GitHub
