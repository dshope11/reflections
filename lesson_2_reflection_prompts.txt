What happens when you initialize a repository? Why do you need to do it?

	When you initialize a repository, git creates the hidden directory .git which contains all of the tools necessary for tracking history. You need to tell git that you are interested in tracking versions of a directory before it can start tracking.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

	The staging area only concerns files that have been changed. The value here is that you have more power to determine exactly which changes belong to a single commit.

	TODO: Accidentaly submitted wrong commit message when adding this text file to repository, try and fix this!

How can you use the staging area to make sure you have one commit per logical
change?

	Use the staging area to see what your commit will look like once it is actually committed to the repository. You can add only changed files which belong together in the commit and compare between the working directory, staging area, and repository with git diff.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

	-If you want to implement a new feature but are not sure if you would like to incorporate it yet
	-Any time you want to keep distinct versions of code in parallel

	Using branches for these cases keep your history more logically consistent than having just one line of commits

How do the diagrams help you visualize the branch structure?

	They help to see very easily which commits will be included in the history of any commit that your HEAD happens to be on. 

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

	When you merge two branches together, you change the way that the commits refer to each other. This is reflected in the way we represent arrows in the diagram.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?

	Git's automatic merging
	pros: saves a ton of time! very impressive that this can even be done
	cons: I guess you don't get to know as well the pieces of code that you didn't change yourself that didn't have a conflict

	always merging manually
	pros: you have complete control over the merge
	cons: very time consuming!
